import telebot
from django.core.paginator import Paginator
from django.db.models import Q
from telebot import types

from app.models import Restaurant, City, Category, Options
from rest_bot import settings
from telegram_bot import dbworker
from telegram_bot.dbworker import get_chosen_city


bot = telebot.TeleBot(settings.BOT_TOKEN)


def makeKeyboard(btn_names, callback_name=None, row_width=2):
    keyboard = types.InlineKeyboardMarkup(row_width=row_width)

    keyboard.add(
        *[types.InlineKeyboardButton(text=name, callback_data=f'{name}_{callback_name}') for name in btn_names])
    return keyboard


@bot.message_handler(commands=['start'])
def start(message):
    text = '–ü—Ä–∏–≤–µ—Ç!ü§ó\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω.\n–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏—â–µ–º?'

    print(dbworker.clear_set_of_restaurants(message.from_user.id))

    cities = City.objects.all()
    cities_for_btns = {'city': [city.name for city in cities]}

    keyboard = makeKeyboard(btn_names=cities_for_btns['city'], callback_name='list_of_categories_opt')
    bot.send_message(message.chat.id, text=text, reply_markup=keyboard, parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: 'opt' in call.data)
def chosen_category(call):
    """–ö–æ–ª–ª–±—ç–∫ —Ö—ç–Ω–¥–ª–µ—Ä. –í—ã–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

    city = get_chosen_city(call.from_user.id).decode()

    if '–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥' in call.data:
        start(call.message)
    elif 'list_of_categories' in call.data:
        show_categories(call, city=None)
    elif '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º' in call.data:
        request_users_location(call)
    elif '–í—ã–ø–∏—Ç—å' in call.data:
        drink_option(call, city)
    elif 'show_categories' in call.data:
        # —É–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –†–µ–¥–∏—Å —Å—Ç–∞—Ä—ã–µ id —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        dbworker.clear_set_of_restaurants(call.from_user.id)
        show_categories(call, city)
    elif 'next_page' in call.data:
        next_page_number = int(call.data[call.data.find('=') + 1:call.data.rfind('_')])

        show_option_info(call, city, next_page_number)
    elif 'previous_page' in call.data:
        previous_page_number = int(call.data[call.data.find('=') + 1:call.data.rfind('_')])
        show_option_info(call, city, previous_page_number)
    else:
        save_rests_in_redis(call, city)
        show_option_info(call, city)


def show_categories(call, city=None):
    """–í—ã–≤–æ–¥ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""

    text = '–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏ –ø–æ–¥–±–æ—Ä–∫—É, –∫—É–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å —Å—Ö–æ–¥–∏—Ç—å.'

    if city is None:
        city = call.data[0:call.data.find('_')]
        # –°–æ—Ö—Ä–∞–Ω—è—é –≥–æ—Ä–æ–¥, –≤—ã–±—Ä–∞–Ω–Ω—ã–π —é–∑–≤–µ—Ä–µ–º, –≤ –ë–î –†–µ–¥–∏—Å
        dbworker.save_users_city(call.from_user.id, city)

    categories = Category.objects.filter(restaurant__cities__name=city).exclude(
        Q(name__startswith='–í–∏–Ω–æ') | Q(name__startswith='–ö–æ–∫—Ç–µ–π–ª–∏') |
        Q(name__startswith='–ù–∞–ø–∏—Ç–∫–∏ –ø–æ–∫—Ä–µ–ø—á–µ') | Q(name__startswith='–ü–∏–≤–æ')).distinct().order_by('name')

    btn_names = [category.name for category in categories]
    btn_names.append('–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º')
    btn_names.append('–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥')

    keyboard = makeKeyboard(btn_names, callback_name='opt', row_width=1)

    bot.edit_message_text(chat_id=call.message.chat.id,
                          text=text,
                          message_id=call.message.message_id,
                          reply_markup=keyboard,
                          parse_mode='HTML')


def save_rests_in_redis(call, city):
    # –ø–æ–ª—É—á–∞–µ–º QuerySet —Å–æ –≤—Å–µ–º–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏ –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    chosen_cat = call.data[0:-4]
    restaurants_list = Restaurant.objects.filter(cities__name__contains=city).filter(
        categories__name=chosen_cat).order_by('id').iterator()

    for restaurant in restaurants_list:
        dbworker.save_set_of_restaurants(call.from_user.id, restaurant.id)


def drink_option(call, city):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–í—ã–ø–∏—Ç—å'. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ """

    text = '–ß—Ç–æ —Ö–æ—á–µ—à—å –≤—ã–ø–∏—Ç—å?'

    drink_options = Category.objects.filter(
        Q(restaurant__cities__name__startswith=city) & Q(name__startswith='–í–∏–Ω–æ') | Q(
            name__startswith='–ö–æ–∫—Ç–µ–π–ª–∏') | Q(name__startswith='–ù–∞–ø–∏—Ç–∫–∏ –ø–æ–∫—Ä–µ–ø—á–µ') | Q(
            name__startswith='–ü–∏–≤–æ')).distinct().order_by('name')

    btn_names = [option.name for option in drink_options]

    keyboard = makeKeyboard(btn_names, callback_name='opt', row_width=1)
    # TODO –µ–±–∞–ª—É –¥–µ–ª–∞—é, –ø–æ—Ç–æ–º –ø–æ–º–µ–Ω—è—Ç—å –≤—Å–µ –Ω–∞–¥–æ))
    keyboard.add(types.InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data='–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥_opt'))

    bot.edit_message_text(chat_id=call.message.chat.id,
                          text=text,
                          message_id=call.message.message_id,
                          reply_markup=keyboard,
                          parse_mode='HTML')


def show_option_info(call, city, page_number=None):
    """–ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

    restaurant_ids = dbworker.get_set_of_restaurants(call.from_user.id)
    list_of_restaurant_ids = [int(id) for id in restaurant_ids]

    items_on_page = 5

    paginator = Paginator(list_of_restaurant_ids, items_on_page)
    if page_number is None:
        page_number = 1
        page = paginator.get_page(page_number)
        print(page.object_list)
    else:
        page = paginator.get_page(page_number)

    restaurant_options = Options.objects.all()

    text = f'''<b>–ö–æ—Ñ–µ –≤ {city} ({page_number}/{paginator.num_pages})</b>\n\n<b>–£—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:</b>'''

    for i in restaurant_options:
        text += f'\n<i>{i.name}</i>'

    text += get_text(page)
    keyboard = get_keyboard(page)

    bot.edit_message_text(chat_id=call.message.chat.id,
                          text=text,
                          message_id=call.message.message_id,
                          reply_markup=keyboard,
                          parse_mode='HTML')


def get_text(page):
    page_content = Restaurant.objects.filter(id__in=page.object_list).order_by('name')
    text = ''

    for i in page_content:
        text += f'''\n\n<b>{i.name}</b>\n{i.short_description}\n<a href="{i.google_map_link}">{i.address}</a>'''
    return text


def get_keyboard(page):
    keyboard = types.InlineKeyboardMarkup(row_width=5)
    if page.has_next() and page.has_previous():
        keyboard.add(
            types.InlineKeyboardButton(text='–•–æ—á—É –µ—â–µ >', callback_data=f'next_page={page.next_page_number()}_opt'))
        keyboard.add(types.InlineKeyboardButton(text='< –ù–∞–∑–∞–¥',
                                                callback_data=f'previous_page={page.previous_page_number()}_opt'))
        keyboard.add(types.InlineKeyboardButton(text='<<< –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥–±–æ—Ä–∫–∞–º', callback_data='show_categories_opt'))
        return keyboard
    elif page.has_next():
        keyboard.add(
            types.InlineKeyboardButton(text='–•–æ—á—É –µ—â–µ >', callback_data=f'next_page={page.next_page_number()}_opt'))
        keyboard.add(types.InlineKeyboardButton(text='<<< –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥–±–æ—Ä–∫–∞–º', callback_data='show_categories_opt'))
        return keyboard
    else:
        keyboard.add(types.InlineKeyboardButton(text='< –ù–∞–∑–∞–¥',
                                                callback_data=f'previous_page={page.previous_page_number()}_opt'))
        keyboard.add(types.InlineKeyboardButton(text='<<< –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥–±–æ—Ä–∫–∞–º', callback_data='show_categories_opt'))
        return keyboard


# –†–∞–±–æ—Ç–∞ —Å –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π —é–∑–µ—Ä–∞
def request_users_location(call):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    button_geo = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
    keyboard.add(button_geo)
    bot.send_message(call.message.chat.id,
                     "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º!",
                     reply_markup=keyboard)


@bot.message_handler(content_types=['location'])
def test(message):
    user_location_longitude = message.location.longitude
    user_location_latitude = message.location.latitude
    print(user_location_longitude, user_location_latitude)


# –í–µ–±—Ö—É–∫ –±–æ—Ç–∞
bot.remove_webhook()
bot.set_webhook(url=f"{settings.DOMAIN}/{settings.BOT_TOKEN}")
