import telebot
from django.core.paginator import Paginator
from django.db.models import Q
from telebot import types

from app.models import City, Category, Restaurant
from rest_bot import settings
from telegram_bot import dbworker, config
from telegram_bot.dbworker import get_chosen_city

bot = telebot.TeleBot(settings.BOT_TOKEN)


def makeKeyboard(btn_names, callback_name=None, row_width=2):
    keyboard = types.InlineKeyboardMarkup(row_width=row_width)

    keyboard.add(
        *[types.InlineKeyboardButton(text=name, callback_data=f'{name}_{callback_name}') for name in btn_names])
    return keyboard


@bot.message_handler(commands=['start'])
def start(message):
    text = '–ü—Ä–∏–≤–µ—Ç!ü§ó\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω.\n–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏—â–µ–º?'

    cities = City.objects.all()
    cities_for_btns = {'city': [city.name for city in cities]}

    keyboard = makeKeyboard(btn_names=cities_for_btns['city'], callback_name='list_of_categories')
    bot.send_message(message.chat.id, text=text, reply_markup=keyboard, parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: 'list_of_categories' in call.data)
def show_categories(call):
    """–í—ã–≤–æ–¥ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""

    text = '–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏ –ø–æ–¥–±–æ—Ä–∫—É, –∫—É–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å —Å—Ö–æ–¥–∏—Ç—å.'

    city = call.data[0:call.data.find('_')]
    # –°–æ—Ö—Ä–∞–Ω—è—é –≥–æ—Ä–æ–¥, –≤—ã–±—Ä–∞–Ω–Ω—ã–π —é–∑–≤–µ—Ä–µ–º, –≤ –ë–î –†–µ–¥–∏—Å
    dbworker.save_users_city(call.message.from_user.id, city)

    categories = Category.objects.filter(restaurant__cities__name=city).exclude(
        Q(name__startswith='–í–∏–Ω–æ') | Q(name__startswith='–ö–æ–∫—Ç–µ–π–ª–∏') |
        Q(name__startswith='–ù–∞–ø–∏—Ç–∫–∏ –ø–æ–∫—Ä–µ–ø—á–µ') | Q(name__startswith='–ü–∏–≤–æ')).distinct()

    btn_names = [category.name for category in categories]
    btn_names.append('–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º')
    btn_names.append('–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥')

    keyboard = makeKeyboard(btn_names, callback_name='opt', row_width=1)

    bot.edit_message_text(chat_id=call.message.chat.id,
                          text=text,
                          message_id=call.message.message_id,
                          reply_markup=keyboard,
                          parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: 'opt' in call.data)
def chosen_category(call):
    """–ö–æ–ª–ª–±—ç–∫ —Ö—ç–Ω–¥–ª–µ—Ä. –í—ã–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

    if '–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥' in call.data:
        start(call.message)
    elif '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã —Ä—è–¥–æ–º' in call.data:
        print('–ü–æ—Ç–æ–º –¥–æ–¥–µ–ª–∞–µ–º. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–º–∞–Ω–¥–µ /nearme{{city}}')
    elif '–í—ã–ø–∏—Ç—å' in call.data:
        chosen_cat = call.data[0:call.data.rfind(' ')]
        drink_option(call, chosen_cat)
    else:
        show_option_info(call)


def drink_option(call, chosen_cat):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–í—ã–ø–∏—Ç—å'. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ """

    text = '–ß—Ç–æ —Ö–æ—á–µ—à—å –≤—ã–ø–∏—Ç—å?'

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –≥–æ—Ä–æ–¥ —é–∑–µ—Ä–∞
    city = get_chosen_city(call.message.from_user.id).decode()

    drink_options = Category.objects.filter(
        Q(restaurant__cities__name__startswith=city) & Q(name__startswith='–í–∏–Ω–æ') | Q(
            name__startswith='–ö–æ–∫—Ç–µ–π–ª–∏') | Q(name__startswith='–ù–∞–ø–∏—Ç–∫–∏ –ø–æ–∫—Ä–µ–ø—á–µ') | Q(
            name__startswith='–ü–∏–≤–æ')).distinct()

    btn_names = [option.name for option in drink_options]

    keyboard = makeKeyboard(btn_names, callback_name='opt', row_width=1)
    # TODO –µ–±–∞–ª—É –¥–µ–ª–∞—é, –ø–æ—Ç–æ–º –ø–æ–º–µ–Ω—è—Ç—å –≤—Å–µ –Ω–∞–¥–æ))
    keyboard.add(types.InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data='–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥_opt'))

    bot.edit_message_text(chat_id=call.message.chat.id,
                          text=text,
                          message_id=call.message.message_id,
                          reply_markup=keyboard,
                          parse_mode='HTML')


def show_option_info(call):
    chosen_cat = call.data[0:-4]
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –≥–æ—Ä–æ–¥ —é–∑–µ—Ä–∞
    city = get_chosen_city(call.message.from_user.id).decode()

    restaurants_list = Restaurant.objects.filter(cities__name__contains=city).filter(
        categories__name=chosen_cat).order_by('id')

    text = f'''<b>–ö–æ—Ñ–µ –≤ {city} (1/6)</b>

    <b>–£—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:</b>
    üê∂ <i>dog-friendly</i>
    üç¥ <i>–µ—Å—Ç—å –∑–∞–≤—Ç—Ä–∞–∫–∏</i>
    üåø <i>–µ—Å—Ç—å –≤–µ—Ä–∞–Ω–¥–∞/—Ç–µ—Ä—Ä–∞—Å–∞</i>
'''
    for i in restaurants_list:
        text += f'''\n\n<b>{i.name}</b>
{i.short_description}
<a href="{i.google_map_link}">{i.address}</a>'''



    bot.edit_message_text(chat_id=call.message.chat.id,
                          text=text,
                          message_id=call.message.message_id,
                          parse_mode='HTML')


# –í–µ–±—Ö—É–∫ –±–æ—Ç–∞
bot.remove_webhook()
bot.set_webhook(url=f"{settings.DOMAIN}/{settings.BOT_TOKEN}")
